{"name":"Terrific Micro","tagline":"Powerful PHP application for simple & complex frontend development with a tiny footprint.","body":"# Readme - Terrific Micro\r\n\r\n<img align=\"right\" src=\"https://raw.githubusercontent.com/namics/terrific-micro/master/assets/img/icon/terrific-micro.png\">\r\n\r\nTerrific Micro is a PHP application for simple and complex frontend development with a tiny footprint. \r\nIt provides a proven but flexible structure to develop your frontend code.\r\nTo unleash the beast and all its power we recommend you read more about the Terrific concept on [terrifically.org](http://terrifically.org) first.\r\n\r\n## Table of contents\r\n\r\n* [Quick Start](#quick-start)\r\n* [Daily Work - Components & Pages](#daily-work---creating-components--pages)\r\n* [Assets](#assets)\r\n* [Conventions](#conventions)\r\n* [Security](#security)\r\n* [Commandline](#commandline)\r\n* [Contributing](#contributing)\r\n* [Credits & License](#example-project-includes)\r\n\r\n## Quick Start\r\n\r\nYou only need an Apache web server with PHP 5.3+ support. \r\nEnable `mod_rewrite` and optionally `mod_deflate` and add the directive `AllowOverride All` for your directory.\r\n\r\n1. Clone repo to a `project`-folder in your web root:\r\n\r\n        git clone https://github.com/namics/terrific-micro.git project\r\n\r\n2. Start working on your code and see the results:\r\n\r\n        http://localhost/project/\r\n        http://localhost/project/app.css\r\n        http://localhost/project/app.js\r\n\r\n### Features\r\n\r\n* Simple project structure\r\n* CSS/JS concatenation and minification\r\n* LESS/SCSS support\r\n* Caching (LESS/SCSS) for optimal performance\r\n* GUI to create components\r\n\r\n## Daily Work - Creating Components & Pages\r\n\r\n### Creating Components\r\n\r\nComponents are created in the `components` folder. A component is an encapsulated block of markup with corresponding styles and scripts. \r\nA terrific module uses the following structure:\r\n\r\n    /Example\r\n    /Example/example.html\r\n    /Example/css/example.css\r\n    /Example/js/example.js\r\n\r\nTerrific Skins (css or js) are created using the following conventions:\r\n\r\n    /Example/css/skins/example-skinname.css\r\n    /Example/js/skins/example-skinname.js\r\n\r\nCreate additional content templates directly in the component folder:\r\n\r\n    /Example/example-variant.html\r\n\r\n### Creating Components & Skins by GUI\r\n\r\nBut the easiest way to do so is using the included GUI. \r\nTry it out by requesting http://localhost/project/terrific/ (don't forget the trailing slash)\r\n\r\n#### Components Configuration\r\n\r\nYou can use more than one type of components. Components are configured in `config.json` (`micro/components`).\r\n\r\n    \"component-type\": {\r\n        \"template\": \"project/templates/module\", // template folder to copy by creating a component\r\n        \"path\": \"components/modules\",           // path for the newly created component\r\n        \"component_prefix\": \"mod\",              // class prefix of component\r\n        \"skin_prefix\": \"skin\"                   // class prefix of skin (optional)\r\n    }\r\n\r\nThe GUI component creator replaces `_component` and `_skin` in file names with the appropriate names. \r\nFor file contents there are a bunch of placeholders available: \r\n\r\n    {{component}} {{component-css}} {{component-js}} {{component-file}} {{component-id}} {{component-prefix}}\r\n    {{skin}} {{skin-css}} {{skin-js}} {{skin-file}} {{skin-id}} {{skin-prefix}}\r\n    {{user}} {{email}}\r\n\r\n### Creating pages\r\n\r\nCreate a new `*.html` file in the `views` folder. You can make as many subfolders as you want.\r\n\r\n    /views/index.html\r\n    /views/content.html\r\n    /views/content/variant.html\r\n\r\nYour new page can then be called by the according URL (with or without an extension). Subfolders are represented with a dash.\r\n\r\n    http://localhost/project/index\r\n    http://localhost/project/content\r\n    http://localhost/project/content-variant\r\n\r\n### Render Components\r\n\r\nPages are meant to be compositions of your components. Therefore you can render components in pages. The component helper gives you two options: \r\nYou can write all markup in your template (= basic mode). \r\nOr you let the helper write the wrapping container with different inputs (= advanced mode).\r\n\r\n* for basic mode use one or two parameters\r\n* for advanced mode use three or more parameters\r\n\r\nUse the component's name as the first parameter. Be aware, the component name is case-sensitive!\r\n\r\n#### Basic Mode: Template with complete Markup\r\n\r\nRender the Example component. (file: `example.html`)\r\n\r\n    <?php component('Example'); ?>\r\n\r\nRender the \"variant\" template from the Example component. (file: `example-variant.html`)\r\n\r\n    <?php component('Example', 'variant'); ?>\r\n\r\n#### Advanced Mode: Template without wrapper container\r\n\r\nRender the Example component with skin \"skinname\". (file: `example-wrapme.html`)\r\n\r\n    <?php component('Example', 'wrapme', 'skinname'); ?>\r\n\r\nRender the Example component with additional attributes. (file: `example-wrapme.html`)\r\n\r\n    <?php component('Example', 'wrapme', null, array('data-id' => 1)); ?> \r\n\r\nRender the Example component with different skins and additional attributes. (file: `example-wrapme.html`)\r\n\r\n    <?php component('Example', 'wrapme', array('skinname','skinname2'), array('data-id' => 1, 'connectors' => 'con1', 'contenteditable' => 'true')); ?> (file: `example-wrapme.html`)\r\n\r\nRender the Example component without special markup. (file: `example-wrapme.html`)\r\n\r\n    <?php component('Example', 'wrapme', true); ?>\r\n\r\n### Render Partials\r\n\r\nRender a partial (HTML snippet). Partials are placed in `views/_partials/` as `*.html` files (e.g. `head.html`).\r\n\r\n    <?php partial('head'); ?>\r\n\r\nYou can apply variables as an array and use them in the partial\r\n\r\n    <?php partial('head', array('title' => 'Page Title')) ?>\r\n    <?php echo $data['title']; ?>\r\n\r\n## Assets\r\n\r\nTerrific Micro's main feature is asset concatenation for CSS and JavaScript files. If changed, the files will be updated on every request, therefore you'll always get the latest version.\r\n\r\n### Assets Configuration\r\n\r\nYou can configure the include order of your assets by defining patterns in `config.json`.\r\n\r\n    \"assets\": {\r\n        \"app.css\": [\r\n            \"+assets/css/variables.less\",\r\n            \"!assets/css/somefile.*\",\r\n            \"assets/css/cssreset.css\",\r\n            \"assets/css/*.*\",\r\n            \"components/modules/*/css/*.*\",\r\n            \"components/modules/*/css/skins/*.*\"\r\n        ],\r\n        \"app.js\": [\r\n            \"!assets/js/somefile.js\",\r\n            \"assets/js/jquery-1.11.1.min.js\",\r\n            \"assets/js/terrific-2-1.0.js\",\r\n            \"assets/js/*.js\",\r\n            \"components/modules/*/js/*.js\",\r\n            \"components/modules/*/js/skins/*.js\"\r\n        ]\r\n    }\r\n\r\n#### Pattern\r\n\r\nThe matching patterns follow the standard glob patterns.\r\nGlob patterns are similar to regular expression but simplified. They are used by several shells.\r\nYou should always try to keep the patterns simple. Usually you only need the asterisk `*` which\r\nmatches zero or more characters.\r\n\r\nYou can read more on standard glob patterns on [php.net](http://www.php.net/manual/en/function.glob.php) and [coburn.info](http://cowburn.info/2010/04/30/glob-patterns/).\r\n\r\n#### Special Pattern Prefixes\r\n\r\n* You can negate a pattern by starting with an exclamation mark `!`.\r\n  `!` = exclude pattern\r\n* Define all your dependencies for the compiling-process with the `+` prefix\r\n  `+` = exclude file but prepend it to every compile call for files with the same file extension.\r\n\r\nThe order of these special patterns does not matter.\r\n\r\n#### Examples\r\n\r\n* `\"!components/modules/Test*\"    Exclude all modules starting with `Test`\r\n* `\"!**/*-test.*\"`                Exclude all filenames ending with `-test`.\r\n* `\"+assets/css/mixins.less\"`     Exclude `assets/css/mixins.less` but prepend to every compile call of every .less file\r\n\r\n#### Note on less & scss @import\r\n\r\nTerrific Micro does not use a watcher for asset concatenation. The resources are concatenated with each request. \r\nDue to less and scss caching-mechanisms in place, this process is quite fast. You should be warned about the usage of @import, though. As long as you configure them relatively to your `project`-folder, they work quite well. But changes in imported files are not tracked by Terrific Micro and therefore changes do not invalidate the cache. This means you either have to clean manually by changing the main file or you can disable caching by setting `$nocache = true;` in `project/index.project.php`.\r\n\r\n#### Other Asset Files\r\n\r\nYou can configure as many different assets as you wish.\r\n\r\n    \"brand.css\": [\r\n        \"assets/css/reset.css\",\r\n        ...\r\n\r\n### Asset Minification\r\n\r\nMinified versions of the CSS and/or JS files can be requested by adding the URL parameter `min`.\r\n\r\n    http://localhost/project/app.css?min\r\n    http://localhost/project/app.js?min\r\n\r\n### JavaScript Debugging\r\n\r\nThe assets can be loaded individually by adding the URL parameter `debug`. This is pretty useful for things like remote debugging in PhpStorm.\r\n\r\n    http://localhost/project/app.js?debug\r\n\r\n## Conventions\r\n\r\n### Resource linking\r\n\r\nTo stay portable you should favour the use of relative paths. Link to resources relatively to the `project`-folder **without** a leading slash.\r\n\r\n    <link rel=\"stylesheet\" href=\"app.css\" type=\"text/css\" />\r\n    <link rel=\"shortcut icon\" href=\"assets/img/icon/favicon.ico\" type=\"image/x-icon\" />\r\n    <script src=\"app.js\"></script>\r\n    <img src=\"components/modules/Example/img/example.png\" alt=\"\" />\r\n    background: url(assets/img/bg/texture.png) scroll 0 0 no-repeat;\r\n    <a href=\"content.html\">Contentpage</a>\r\n\r\n### Upper & lower case letters\r\n\r\nUse all lowercase if possible. \r\nExceptions:\r\n\r\n* Component folders must match terrific classes, therefore they are case-sensitive.\r\n* TerrificJS uses upper case for its namespace `Tc` and class names `Tc.Module.Example`\r\n\r\nUse the component helper with the *exact* component name:\r\n\r\n    <?php component('NavMain'); ?>\r\n\r\nNote that camel case ComponentNames are represented in CSS with dashes.\r\n\r\n    Navigation   -> Tc.Module.Navigation   -> mod-navigation\r\n    NavMain      -> Tc.Module.NavMain      -> mod-nav-main\r\n    AdminNavMain -> Tc.Module.AdminNavMain -> mod-admin-nav-main\r\n\r\n### Indentation\r\n\r\nTerrific Micro uses tabs for indentation and spaces for alignment.\r\n\r\n## Commandline\r\n\r\nYou can access Terrific Micro via your commandline and your php binary of choice.\r\n\r\n    php app/bin/micro\r\n\r\nYou can add an additional argument to get the output for either\r\n\r\n* a specific view\r\n* a specific CSS file set in config.json\r\n* a specific JS file set in config.json\r\n\r\nHere are some examples:\r\n\r\n    // Generate index view\r\n    php app/bin/micro view:index\r\n\r\n    // Generate content-variant view\r\n    php app/bin/micro view:content-variant\r\n\r\n    // Generate content view with additional GET parameters foo=bar&baz=foo\r\n    php app/bin/micro view:content \"foo=bar&baz=foo\"\r\n\r\n    // Generate app.css\r\n    php app/bin/micro css:app\r\n\r\n    // Generate minified app.css\r\n    php app/bin/micro css:app min\r\n\r\n    // Generate app.js\r\n    php app/bin/micro js:app\r\n\r\n    // Generate minified app.js\r\n    php app/bin/micro js:app min\r\n\r\n    // Generate debug app.js\r\n    php app/bin/micro js:app debug\r\n\r\n## Security\r\n\r\nTo enable the use of Terrific Micro in any project structure some access restricting rules were set. \r\nThese rules were made with the Apache web server in mind by using `.htaccess` files. These files can easily be adjusted as necessary.\r\n\r\n### Terrific GUI\r\n\r\nAll requests to `/terrific/` except from `localhost` will be blocked (`403 Forbidden`). To adjust this\r\nbehaviour, see `app/terrific/public/.htaccess`.\r\n\r\n### Directory Listing\r\n\r\nThe directory listing is turned off in `.htaccess`.\r\n\r\n## Contributing\r\n\r\n* For Bugs & Features please use [github](https://github.com/namics/terrific-micro/issues)\r\n* Feel free to fork and send PRs. That's the best way to discuss your ideas.\r\n\r\n## Example Project Includes\r\n\r\n* [jQuery 1.11.1](http://jquery.com/)\r\n* [TerrificJS 2.1.0](http://terrifically.org/api/)\r\n* [YUI CSS Reset 3.17.2](http://yuilibrary.com/yui/docs/cssreset/)\r\n* Favicon & Home-Icons from Terrific Micro (replace with your own)\r\n* Component `Example` and some styles in assets/css (you don't need them)\r\n\r\n## Used PHP Libraries\r\n\r\n* [Less.php](http://lessphp.gpeasy.com)\r\n* [scssphp](http://leafo.net/scssphp)\r\n* [CssMin](https://code.google.com/p/cssmin/)\r\n* [JShrink](https://github.com/tedious/JShrink)\r\n\r\n## Credits\r\n\r\nTerrific Micro was initiated by [Roger Dudler](https://github.com/rogerdudler) and is now maintained by Namics AG\r\n\r\n## License\r\n\r\nReleased under the [MIT license](https://github.com/namics/terrific-micro/blob/master/LICENSE)","google":"UA-55502610-1","note":"Don't delete this file! It's used internally to help with page regeneration."}